# Check README.md for usage & style conventions.

AllCops:
  # we will opt-in to the rules we want.
  DisabledByDefault: true

  # don't check style on generated files.
  Exclude:
    - 'tmp/**/*'
    - 'db/schema.rb'
    - 'bin/*'
    - 'spec/dummy/db/schema.rb'
    - 'spec/dummy/bin/*'
    - 'app/models/protobuf/**/*'

# codifying current rubocop defaults
# establish our own baseline in case the project's defaults are changed
#
# flagging this as 'refactor'-level because they're so arbitrary
# tempted to do the same for cyclomatic complexity, perceived complexity, etc.
# will hold off on that for now, but PRs/discussion are welcome.
Metrics/AbcSize:
  Enabled: true
  Max: 25
  Severity: refactor


# writing long var names as a way of self-documenting shouldn't be discouraged
# also allowing URLs & etc so as not to require artifically breaking apart
# non-code strings. (this is current default already, but let's be explicit.)
#
# "It's like writing on a roll of toilet paper." - George Riley
Metrics/LineLength:
  Enabled: true
  Max: 100
  AllowHeredoc: true
  AllowURI: true
  URISchemes:
    - http
    - https


Metrics/MethodLength:
  Enabled: true
  Max: 25
  Severity: refactor



# Layout/AlignParameters
# "Align the parameters of a method call if they span more than one line."
#
# 'with_fixed_indentation' means subsequent lines of method arguments should
# have 1 level of indentation from the method invocation.
#
# allowed examples:
#
#   server 'beapp-e01.private.ted.com',
#     user: 'tedconf',
#     roles: %w(web app)
#
#   set :ssh_options,
#     port: 55423, # rubocop:disable Style/NumericLiterals
#     forward_agent: true,
#     proxy: Net::SSH::Proxy::Command.new('ssh gateway-e01.ted.com -p 55423 -W %h:%p')
#
Layout/AlignParameters:
  EnforcedStyle: with_fixed_indentation



# expect {
#   a_thing
# }.to raise_error
#
# is fine.
Style/BlockDelimiters:
  EnforcedStyle: braces_for_chaining



# Layout/ClosingParenthesisIndentation
# "Align ) with ("
#
# example:
#
#   create(:talkstar_media,
#     identifier: 'aaa',
#     talkstar_media_provider_id: non_acme_provider_id
#   )
#
# aligning ')' with '(' in cases like this end up creating unnecessarily long
# lines, without improving readability all that much (if at all) IMO.
Layout/ClosingParenthesisIndentation:
  Enabled: false



# comments explaining the purpose of a class are a good thing.
# but they're unecessary in a few cases:
#
#   - migration classes. the purpose of a migration is obvious.
#   - classes in a dummy application.
Style/Documentation:
  Enabled: true
  Exclude:
    - 'db/migrate/*'
    - 'spec/dummy/**/*'



# it's ok to do this when it makes the code feel less crowded.
#
# example:
#
#   class TalksController < ApplicationController
#
#     def show
#       expires_in 10.seconds, public: true
#       super
#     end
#
#   end
#
# according to these cops, those empty lines after `class` and before the final
# `end` shouldn't be there. they aren't always necessary, of course, but in
# many cases they improve a person's ability to skim the code quickly.
Layout/EmptyLinesAroundBlockBody:
  Enabled: false
Layout/EmptyLinesAroundClassBody:
  Enabled: false
Layout/EmptyLinesAroundMethodBody:
  Enabled: false
Layout/EmptyLinesAroundModuleBody:
  Enabled: false



# Either of these are ok
#
#   if foo
#     bar
#   end
#
#   bar if foo
Style/IfUnlessModifier:
  Enabled: false



# "Style/Lambda: Use the lambda method for multi-line lambdas."
#
# multi-line lambdas using curly-brace syntax come up in a few places:
#   - named scopes in models
#   - config/deploy.rb, which relies heavily on lambdas
#
# example:
#
#   scope :whatever, -> {
#     where(foo: 1)
#   }
#
# this is perfectly readable, but is flagged by this cop.
Style/Lambda:
  Enabled: false



# `unless` has always been a cognitive stumbling block for me (alex) & I
# strongly prefer `! if`.
#
# maybe controversial? forgiveness > permission. I can see backing off on this
# one depending on what the rest of y'all think.
Style/NegatedIf:
  Enabled: false



# Having a lot of code in a block is probably not a great thing.  But in specs,
# it's actually great, because spec frameworks like RSpec use blocks to define
# scopes of specs. It seems like specs are not what this rule was aimed at.
#
#     RSpec.describe User do
#       # All your specs go in here.
#     end
#
# Same goes for routes - those blocks can get pretty long.
# Borrowed from https://github.com/NobodysNightmare/rubocop/commit/99124543155b728b495560ab9e2a88ff597e1899#diff-e93280b3b31a6438c533a5f3232340d8R1179
Metrics/BlockLength:
  Enabled: true
  ExcludedMethods:
    - context
    - describe
    - it
    - shared_examples
    - shared_examples_for
    - namespace
    - draw
