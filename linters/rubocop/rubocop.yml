# Check README.md for usage & style conventions.

AllCops:
  # we will opt-in to the rules we want.
  DisabledByDefault: true

  # don't check style on generated files.
  Exclude:
    - 'tmp/**/*'
    - 'db/schema.rb'
    - 'bin/*'
    - 'spec/dummy/db/schema.rb'
    - 'spec/dummy/bin/*'
    - 'app/models/protobuf/**/*'


# DRY your Gemfile
Bundler/DuplicatedGem:
  Enabled: true


# alphabetize your Gemfile.
# if you like grouping them logically, a comment will be interpreted as the
# beginning of a new list.
Bundler/OrderedGems:
  Enabled: true
  TreatCommentsAsGroupSeparators: true


# codifying current rubocop defaults
# establish our own baseline in case the project's defaults are changed
#
# flagging this as 'refactor'-level because they're so arbitrary
# tempted to do the same for cyclomatic complexity, perceived complexity, etc.
# will hold off on that for now, but PRs/discussion are welcome.
Metrics/AbcSize:
  Enabled: true
  Max: 25
  Severity: refactor


# writing long var names as a way of self-documenting shouldn't be discouraged
# also allowing URLs & etc so as not to require artifically breaking apart
# non-code strings. (this is current default already, but let's be explicit.)
#
# "It's like writing on a roll of toilet paper." - George Riley
Metrics/LineLength:
  Enabled: true
  Max: 100
  AllowHeredoc: true
  AllowURI: true
  URISchemes:
    - http
    - https


Metrics/MethodLength:
  Enabled: true
  Max: 25
  Severity: refactor


# expect {
#   a_thing
# }.to raise_error
#
# is fine.
Style/BlockDelimiters:
  Enabled: true
  EnforcedStyle: braces_for_chaining


# comments explaining the purpose of a class are a good thing.
# but they're unecessary in a few cases:
#
#   - migration classes. the purpose of a migration is obvious.
#   - classes in a dummy application.
Style/Documentation:
  Enabled: true
  Exclude:
    - 'db/migrate/*'
    - 'spec/dummy/**/*'


# Having a lot of code in a block is probably not a great thing.  But in specs,
# it's actually great, because spec frameworks like RSpec use blocks to define
# scopes of specs. It seems like specs are not what this rule was aimed at.
#
#     RSpec.describe User do
#       # All your specs go in here.
#     end
#
# Same goes for routes - those blocks can get pretty long.
# Borrowed from https://github.com/NobodysNightmare/rubocop/commit/99124543155b728b495560ab9e2a88ff597e1899#diff-e93280b3b31a6438c533a5f3232340d8R1179
Metrics/BlockLength:
  Enabled: true
  ExcludedMethods:
    - context
    - describe
    - it
    - shared_examples
    - shared_examples_for
    - namespace
    - draw

# cribbed from https://github.com/rails/rails/blob/1f7f872ac6c8b57af6e0117bde5f6c38d0bae923/.rubocop.yml

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Do not use braces for hash literals when they are the last argument of a
# method call.
Style/BracesAroundHashParameters:
  Enabled: true

# Indent private/protected/public as deep as method definitions
Layout/AccessModifierIndentation:
  Enabled: true

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

# Multi-line method chaining should be done with leading dots.
# Layout/DotPosition:
#   Enabled: true # pending more consensus

Layout/EmptyLineAfterMagicComment:
  Enabled: true

# No extra empty lines.
Layout/EmptyLines:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

Layout/FirstParameterIndentation:
  Enabled: true

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one
# extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: rails

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundOperators:
  Enabled: true

Layout/SpaceBeforeFirstArg:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

# Check quotes usage according to lint rule below.
# Style/StringLiterals:
#   Enabled: true # pending more consensus

# Detect hard tabs, no hard tabs.
Layout/Tab:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingBlankLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/UnneededPercentQ:
  Enabled: true

Style/StabbyLambdaParentheses:
  Enabled: true
  EnforcedStyle: require_parentheses

Style/SignalException:
  Enabled: true
  EnforcedStyle: only_raise
